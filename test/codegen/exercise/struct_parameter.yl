// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: compiler %s -o struct_parameter && ./struct_parameter | grep -Plzx '1\n2\n'
struct S {
  x: number,
  y: number,
}

fn foo(s: S): void {
  println(s.x);
  println(s.y);
}
// CHECK: define void @foo(%struct.S* readonly %s) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = getelementptr inbounds %struct.S, %struct.S* %s, i32 0, i32 0
// CHECK-NEXT:   %1 = load double, double* %0, align 8
// CHECK-NEXT:   call void @println(double %1)
// CHECK-NEXT:   %2 = getelementptr inbounds %struct.S, %struct.S* %s, i32 0, i32 1
// CHECK-NEXT:   %3 = load double, double* %2, align 8
// CHECK-NEXT:   call void @println(double %3)
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn bar(var s: S): S {
  return s;
}
// CHECK: define void @bar(%struct.S* sret(%struct.S) %ret, %struct.S* byval(%struct.S) %s) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = bitcast %struct.S* %ret to i8*
// CHECK-NEXT:   %1 = bitcast %struct.S* %s to i8*
// CHECK-NEXT:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 16, i1 false)
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = <null operand!>, %entry
// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main(): void {
  var s = S { x: 1, y: 2 };
  foo(s);
  s = bar(s);
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %s = alloca %struct.S, align 8
// CHECK-NEXT:   %S.tmp = alloca %struct.S, align 8

// CHECK-NEXT:   %struct.ret.tmp = alloca %struct.S, align 8
// CHECK-NEXT:   %struct.arg.tmp = alloca %struct.S, align 8

// CHECK-NEXT:   %0 = getelementptr inbounds %struct.S, %struct.S* %S.tmp, i32 0, i32 0
// CHECK-NEXT:   store double 1.000000e+00, double* %0, align 8
// CHECK-NEXT:   %1 = getelementptr inbounds %struct.S, %struct.S* %S.tmp, i32 0, i32 1
// CHECK-NEXT:   store double 2.000000e+00, double* %1, align 8
// CHECK-NEXT:   %2 = bitcast %struct.S* %s to i8*
// CHECK-NEXT:   %3 = bitcast %struct.S* %S.tmp to i8*
// CHECK-NEXT:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 16, i1 false)

// CHECK-NEXT:   call void @foo(%struct.S* readonly %s)

// CHECK-NEXT:   %4 = bitcast %struct.S* %struct.arg.tmp to i8*
// CHECK-NEXT:   %5 = bitcast %struct.S* %s to i8*
// CHECK-NEXT:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false)
// CHECK-NEXT:   call void @bar(%struct.S* sret(%struct.S) %struct.ret.tmp, %struct.S* byval(%struct.S) %struct.arg.tmp)
// CHECK-NEXT:   %6 = bitcast %struct.S* %s to i8*
// CHECK-NEXT:   %7 = bitcast %struct.S* %struct.ret.tmp to i8*
// CHECK-NEXT:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)

// CHECK-NEXT:   ret void
// CHECK-NEXT: }
