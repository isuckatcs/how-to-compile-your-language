// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: compiler %s -o temporary_struct && ./temporary_struct | grep -Plzx '3\n3\n1\n2\n3\n'
struct S {
  x: number,
  s2: S2,
}

struct S2 {
  x: number,
  y: number,
  z: number,
}

fn foo(): void {
  println(S2 { x: 1, y: 2, z: 3 }.z);
  println(S{ x: 1, s2: S2 { x: 2, y: 3, z: 4 } }.s2.y);
}
// CHECK: define void @foo() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %S2.tmp = alloca %struct.S2, align 8
// CHECK-NEXT:   %S.tmp = alloca %struct.S, align 8
// CHECK-NEXT:   %S2.tmp1 = alloca %struct.S2, align 8

// CHECK-NEXT:   %0 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 0
// CHECK-NEXT:   store double 1.000000e+00, double* %0, align 8
// CHECK-NEXT:   %1 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 1
// CHECK-NEXT:   store double 2.000000e+00, double* %1, align 8
// CHECK-NEXT:   %2 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 2
// CHECK-NEXT:   store double 3.000000e+00, double* %2, align 8

// CHECK-NEXT:   %3 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 2
// CHECK-NEXT:   %4 = load double, double* %3, align 8
// CHECK-NEXT:   call void @println(double %4)
// CHECK-NEXT:   %5 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 0
// CHECK-NEXT:   store double 2.000000e+00, double* %5, align 8
// CHECK-NEXT:   %6 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 1
// CHECK-NEXT:   store double 3.000000e+00, double* %6, align 8
// CHECK-NEXT:   %7 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 2
// CHECK-NEXT:   store double 4.000000e+00, double* %7, align 8
// CHECK-NEXT:   %8 = getelementptr inbounds %struct.S, %struct.S* %S.tmp, i32 0, i32 0
// CHECK-NEXT:   store double 1.000000e+00, double* %8, align 8
// CHECK-NEXT:   %9 = getelementptr inbounds %struct.S, %struct.S* %S.tmp, i32 0, i32 1
// CHECK-NEXT:   %10 = bitcast %struct.S2* %9 to i8*
// CHECK-NEXT:   %11 = bitcast %struct.S2* %S2.tmp1 to i8*
// CHECK-NEXT:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false)

// CHECK-NEXT:   %12 = getelementptr inbounds %struct.S, %struct.S* %S.tmp, i32 0, i32 1
// CHECK-NEXT:   %13 = getelementptr inbounds %struct.S2, %struct.S2* %12, i32 0, i32 1
// CHECK-NEXT:   %14 = load double, double* %13, align 8
// CHECK-NEXT:   call void @println(double %14)

// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn bar(): void {
  println(S2 { x: 1, y: 2, z: 3 }.x);
  println(S2 { x: 1, y: 2, z: 3 }.y);
  println(S2 { x: 1, y: 2, z: 3 }.z);
}
// CHECK: define void @bar() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %S2.tmp = alloca %struct.S2, align 8
// CHECK-NEXT:   %S2.tmp1 = alloca %struct.S2, align 8
// CHECK-NEXT:   %S2.tmp2 = alloca %struct.S2, align 8

// CHECK-NEXT:   %0 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 0
// CHECK-NEXT:   store double 1.000000e+00, double* %0, align 8
// CHECK-NEXT:   %1 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 1
// CHECK-NEXT:   store double 2.000000e+00, double* %1, align 8
// CHECK-NEXT:   %2 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 2
// CHECK-NEXT:   store double 3.000000e+00, double* %2, align 8

// CHECK-NEXT:   %3 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp, i32 0, i32 0
// CHECK-NEXT:   %4 = load double, double* %3, align 8
// CHECK-NEXT:   call void @println(double %4)

// CHECK-NEXT:   %5 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 0
// CHECK-NEXT:   store double 1.000000e+00, double* %5, align 8
// CHECK-NEXT:   %6 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 1
// CHECK-NEXT:   store double 2.000000e+00, double* %6, align 8
// CHECK-NEXT:   %7 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 2
// CHECK-NEXT:   store double 3.000000e+00, double* %7, align 8

// CHECK-NEXT:   %8 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp1, i32 0, i32 1
// CHECK-NEXT:   %9 = load double, double* %8, align 8
// CHECK-NEXT:   call void @println(double %9)

// CHECK-NEXT:   %10 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp2, i32 0, i32 0
// CHECK-NEXT:   store double 1.000000e+00, double* %10, align 8
// CHECK-NEXT:   %11 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp2, i32 0, i32 1
// CHECK-NEXT:   store double 2.000000e+00, double* %11, align 8
// CHECK-NEXT:   %12 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp2, i32 0, i32 2
// CHECK-NEXT:   store double 3.000000e+00, double* %12, align 8

// CHECK-NEXT:   %13 = getelementptr inbounds %struct.S2, %struct.S2* %S2.tmp2, i32 0, i32 2
// CHECK-NEXT:   %14 = load double, double* %13, align 8
// CHECK-NEXT:   call void @println(double %14)

// CHECK-NEXT:   ret void
// CHECK-NEXT: }

fn main(): void {
  foo();
  bar();
}
