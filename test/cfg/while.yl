// RUN: compiler %s -cfg-dump 2>&1 | filecheck %s --match-full-lines
fn main(): void {
    5.0;
    while 4.0 {
        3.0;
    }

    1.0;
}
// CHECK: main:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 2 5
// CHECK-NEXT:   succs: 1(U) 3
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   | value: 4
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     | value: 4
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 4(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn orCondition(): void {
    5;
    while 4 || 4 || 4 {
        3;
    }

    1;
}
// CHECK: orCondition:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 2 5
// CHECK-NEXT:   succs: 1(U) 3
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:   | value: 1
// CHECK-NEXT:     ResolvedBinaryOperator: '||'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedBinaryOperator: '||'
// CHECK-NEXT:     | value: 1
// CHECK-NEXT:       ResolvedBinaryOperator: '||'
// CHECK-NEXT:         ResolvedNumberLiteral: '4'
// CHECK-NEXT:         ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 4(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn andCondition(): void {
    5;
    while 4 && 4 && 4 {
        3;
    }

    1;
}
// CHECK: andCondition:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 2 5
// CHECK-NEXT:   succs: 1(U) 3
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:   | value: 1
// CHECK-NEXT:     ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     | value: 1
// CHECK-NEXT:       ResolvedBinaryOperator: '&&'
// CHECK-NEXT:         ResolvedNumberLiteral: '4'
// CHECK-NEXT:         ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 4(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn nestedLoops(): void {
    8.0;
    while 7.0 {
        6.0;
        while 5.0 {
            4.0;
        }
    }

    1.0;
}
// CHECK: nestedLoops:
// CHECK-NEXT: [9 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 8
// CHECK-NEXT:
// CHECK-NEXT: [8]
// CHECK-NEXT:   preds: 9
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:   ResolvedNumberLiteral: '8'
// CHECK-NEXT:
// CHECK-NEXT: [7]
// CHECK-NEXT:   preds: 2 8
// CHECK-NEXT:   succs: 1(U) 6
// CHECK-NEXT:   ResolvedNumberLiteral: '7'
// CHECK-NEXT:   | value: 7
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '7'
// CHECK-NEXT:     | value: 7
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '6'
// CHECK-NEXT:       ResolvedWhileStmt
// CHECK-NEXT:         ResolvedNumberLiteral: '5'
// CHECK-NEXT:         | value: 5
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [6]
// CHECK-NEXT:   preds: 7
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:   ResolvedNumberLiteral: '6'
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 3 6
// CHECK-NEXT:   succs: 2(U) 4
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:   | value: 5
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '5'
// CHECK-NEXT:     | value: 5
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 5(U)
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 7(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn returnMidloop(): void {
    8.0;
    while 7.0 {
        6.0;
        if 6.0 {
            5.0;
            return;

            4.0;
        }

        3.0;
    }

    1.0;
}
// CHECK: returnMidloop:
// CHECK-NEXT: [9 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 8
// CHECK-NEXT:
// CHECK-NEXT: [8]
// CHECK-NEXT:   preds: 9
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:   ResolvedNumberLiteral: '8'
// CHECK-NEXT:
// CHECK-NEXT: [7]
// CHECK-NEXT:   preds: 2 8
// CHECK-NEXT:   succs: 1(U) 6
// CHECK-NEXT:   ResolvedNumberLiteral: '7'
// CHECK-NEXT:   | value: 7
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '7'
// CHECK-NEXT:     | value: 7
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '6'
// CHECK-NEXT:       ResolvedIfStmt
// CHECK-NEXT:         ResolvedNumberLiteral: '6'
// CHECK-NEXT:         | value: 6
// CHECK-NEXT:         ResolvedBlock
// CHECK-NEXT:           ResolvedNumberLiteral: '5'
// CHECK-NEXT:           ResolvedReturnStmt
// CHECK-NEXT:           ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [6]
// CHECK-NEXT:   preds: 7
// CHECK-NEXT:   succs: 3(U) 5
// CHECK-NEXT:   ResolvedNumberLiteral: '6'
// CHECK-NEXT:   ResolvedNumberLiteral: '6'
// CHECK-NEXT:   | value: 6
// CHECK-NEXT:   ResolvedIfStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '6'
// CHECK-NEXT:     | value: 6
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '5'
// CHECK-NEXT:       ResolvedReturnStmt
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:   ResolvedReturnStmt
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 4 6(U)
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 7
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 7(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 5
// CHECK-NEXT:   succs:

fn whileOnly(): void {
    while 1.0 {

    }
}
// CHECK: whileOnly:
// CHECK-NEXT: [3 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 1 3
// CHECK-NEXT:   succs: 0(U) 1
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:   | value: 1
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '1'
// CHECK-NEXT:     | value: 1
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2
// CHECK-NEXT:   succs: 2
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 2(U)
// CHECK-NEXT:   succs:

fn whileAfterReturn(): void {
    4;
    return;
   
    while 3 {}
    1;
}
// CHECK: whileAfterReturn:
// CHECK-NEXT: [5 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 4
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedReturnStmt
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 2
// CHECK-NEXT:   succs: 1(U) 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   | value: 3
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:     | value: 3
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 3(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 4
// CHECK-NEXT:   succs:

fn whileAfterIf(): void {
    if 5 {
        4;
    }
   
    while 3 {}
    1;
}
// CHECK: whileAfterIf:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 6
// CHECK-NEXT:   succs: 3(U) 4
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:   | value: 5
// CHECK-NEXT:   ResolvedIfStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '5'
// CHECK-NEXT:     | value: 5
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 2 4 5(U)
// CHECK-NEXT:   succs: 1(U) 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   | value: 3
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:     | value: 3
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 3(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:

fn whileAfterWhile(): void {
    while 5 {}
    while 3 {}
    1;
}
// CHECK: whileAfterWhile:
// CHECK-NEXT: [6 (entry)]
// CHECK-NEXT:   preds:
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [5]
// CHECK-NEXT:   preds: 4 6
// CHECK-NEXT:   succs: 3(U) 4
// CHECK-NEXT:   ResolvedNumberLiteral: '5'
// CHECK-NEXT:   | value: 5
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '5'
// CHECK-NEXT:     | value: 5
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:
// CHECK-NEXT: [4]
// CHECK-NEXT:   preds: 5
// CHECK-NEXT:   succs: 5
// CHECK-NEXT:
// CHECK-NEXT: [3]
// CHECK-NEXT:   preds: 2 5(U)
// CHECK-NEXT:   succs: 1(U) 2
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   | value: 3
// CHECK-NEXT:   ResolvedWhileStmt
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:     | value: 3
// CHECK-NEXT:     ResolvedBlock
// CHECK-NEXT:
// CHECK-NEXT: [2]
// CHECK-NEXT:   preds: 3
// CHECK-NEXT:   succs: 3
// CHECK-NEXT:
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 3(U)
// CHECK-NEXT:   succs: 0
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT:
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1
// CHECK-NEXT:   succs:
