// RUN: compiler %s -cfg-dump 2>&1 | filecheck %s --match-full-lines
fn main(): void {
    3.0 || 2.0;
    1.0;
}
// CHECK: main:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs:

fn and(): void {
    3.0 && 2.0;
    1.0;
}
// CHECK: and:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn multipleOr(): void {
    4.0 || 3.0 || 2.0;
    1.0;
}
// CHECK: multipleOr:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:     ResolvedBinaryOperator: '||'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn multipleAnd(): void {
    4.0 && 3.0 && 2.0;
    1.0;
}
// CHECK: multipleAnd:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn andOr(): void {
    4.0 && 3.0 || 2.0;
    1.0;
}
// CHECK: andOr:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:     ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       ResolvedNumberLiteral: '4'
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs: 

fn orAnd(): void {
    4.0 || 3.0 && 2.0;
    1.0;
}
// CHECK: orAnd:
// CHECK-NEXT: [2 (entry)]
// CHECK-NEXT:   preds: 
// CHECK-NEXT:   succs: 1 
// CHECK-NEXT: 
// CHECK-NEXT: [1]
// CHECK-NEXT:   preds: 2 
// CHECK-NEXT:   succs: 0 
// CHECK-NEXT:   ResolvedNumberLiteral: '4'
// CHECK-NEXT:   ResolvedNumberLiteral: '3'
// CHECK-NEXT:   ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '&&'
// CHECK-NEXT:     ResolvedNumberLiteral: '3'
// CHECK-NEXT:     ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedBinaryOperator: '||'
// CHECK-NEXT:     ResolvedNumberLiteral: '4'
// CHECK-NEXT:     ResolvedBinaryOperator: '&&'
// CHECK-NEXT:       ResolvedNumberLiteral: '3'
// CHECK-NEXT:       ResolvedNumberLiteral: '2'
// CHECK-NEXT:   ResolvedNumberLiteral: '1'
// CHECK-NEXT: 
// CHECK-NEXT: [0 (exit)]
// CHECK-NEXT:   preds: 1 
// CHECK-NEXT:   succs:
