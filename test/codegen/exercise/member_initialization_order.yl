// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: compiler %s -o member_initialization_order && ./member_initialization_order | grep -Plzx '1\n2\n3\n2\n1\n3\n3\n2\n1\n'
struct Color {
  r: number,
  g: number,
  b: number,
}

fn printAndReturn(n: number): number {
  println(n);
  return n;
}

fn main(): void {
  Color {
    r: printAndReturn(1),
    g: printAndReturn(2),
    b: printAndReturn(3),
  };

  Color {
    g: printAndReturn(2),
    r: printAndReturn(1),
    b: printAndReturn(3),
  };

  Color {
    b: printAndReturn(3),
    g: printAndReturn(2),
    r: printAndReturn(1),
  };
}
// CHECK: define void @__builtin_main() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %Color.tmp = alloca %struct.Color, align 8
// CHECK-NEXT:   %Color.tmp1 = alloca %struct.Color, align 8
// CHECK-NEXT:   %Color.tmp2 = alloca %struct.Color, align 8

// CHECK-NEXT:   %0 = call double @printAndReturn(double 1.000000e+00)
// CHECK-NEXT:   %1 = call double @printAndReturn(double 2.000000e+00)
// CHECK-NEXT:   %2 = call double @printAndReturn(double 3.000000e+00)
// CHECK-NEXT:   %3 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp, i32 0, i32 0
// CHECK-NEXT:   store double %0, double* %3, align 8
// CHECK-NEXT:   %4 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp, i32 0, i32 1
// CHECK-NEXT:   store double %1, double* %4, align 8
// CHECK-NEXT:   %5 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp, i32 0, i32 2
// CHECK-NEXT:   store double %2, double* %5, align 8

// CHECK-NEXT:   %6 = call double @printAndReturn(double 2.000000e+00)
// CHECK-NEXT:   %7 = call double @printAndReturn(double 1.000000e+00)
// CHECK-NEXT:   %8 = call double @printAndReturn(double 3.000000e+00)
// CHECK-NEXT:   %9 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp1, i32 0, i32 0
// CHECK-NEXT:   store double %7, double* %9, align 8
// CHECK-NEXT:   %10 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp1, i32 0, i32 1
// CHECK-NEXT:   store double %6, double* %10, align 8
// CHECK-NEXT:   %11 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp1, i32 0, i32 2
// CHECK-NEXT:   store double %8, double* %11, align 8

// CHECK-NEXT:   %12 = call double @printAndReturn(double 3.000000e+00)
// CHECK-NEXT:   %13 = call double @printAndReturn(double 2.000000e+00)
// CHECK-NEXT:   %14 = call double @printAndReturn(double 1.000000e+00)
// CHECK-NEXT:   %15 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp2, i32 0, i32 0
// CHECK-NEXT:   store double %14, double* %15, align 8
// CHECK-NEXT:   %16 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp2, i32 0, i32 1
// CHECK-NEXT:   store double %13, double* %16, align 8
// CHECK-NEXT:   %17 = getelementptr inbounds %struct.Color, %struct.Color* %Color.tmp2, i32 0, i32 2
// CHECK-NEXT:   store double %12, double* %17, align 8

// CHECK-NEXT:   ret void
// CHECK-NEXT: }
