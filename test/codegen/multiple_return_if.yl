// RUN: compiler %s -llvm-dump 2>&1 | filecheck %s
// RUN: compiler %s -o multiple_return_if && ./multiple_return_if | grep -Plzx '2\n10\n5.2\n'
fn foo(var x: number): number {
    if x == 1.0 {
        return 2.0;

        return 3.0;
    } else if x == 2.0 {
        return 10.0;

        let y: number = 5.0 + 1.0;
    }

    return 5.2;
}
// CHECK: define double @foo(double %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca double, align 8
// CHECK-NEXT:   %x1 = alloca double, align 8
// CHECK-NEXT:   store double %x, double* %x1, align 8
// CHECK-NEXT:   %0 = load double, double* %x1, align 8
// CHECK-NEXT:   %1 = fcmp oeq double %0, 1.000000e+00
// CHECK-NEXT:   %to.double = uitofp i1 %1 to double
// CHECK-NEXT:   %to.bool = fcmp one double %to.double, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool, label %if.true, label %if.false
// CHECK-NEXT: 
// CHECK-NEXT: if.true:                                          ; preds = %entry
// CHECK-NEXT:   store double 2.000000e+00, double* %retval, align 8
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.false:                                         ; preds = %entry
// CHECK-NEXT:   %2 = load double, double* %x1, align 8
// CHECK-NEXT:   %3 = fcmp oeq double %2, 2.000000e+00
// CHECK-NEXT:   %to.double2 = uitofp i1 %3 to double
// CHECK-NEXT:   %to.bool3 = fcmp one double %to.double2, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool3, label %if.true4, label %if.exit
// CHECK-NEXT: 
// CHECK-NEXT: if.true4:                                         ; preds = %if.false
// CHECK-NEXT:   store double 1.000000e+01, double* %retval, align 8
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: if.exit:                                          ; preds = <null operand!>, %if.false
// CHECK-NEXT:   br label %if.exit5
// CHECK-NEXT: 
// CHECK-NEXT: if.exit5:                                         ; preds = %if.exit, <null operand!>
// CHECK-NEXT:   store double 5.200000e+00, double* %retval, align 8
// CHECK-NEXT:   br label %return
// CHECK-NEXT: 
// CHECK-NEXT: return:                                           ; preds = <null operand!>, %if.exit5, %if.true4, %if.true
// CHECK-NEXT:   %4 = load double, double* %retval, align 8
// CHECK-NEXT:   ret double %4
// CHECK-NEXT: }

fn main(): void {
    println(foo(1.0));
    println(foo(2.0));
    println(foo(3.0));
}
